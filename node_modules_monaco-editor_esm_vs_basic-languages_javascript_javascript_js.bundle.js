"use strict";
(self["webpackChunknova_editor"] = self["webpackChunknova_editor"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_javascript_javascript_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/javascript/javascript.js":
/*!************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/javascript/javascript.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   conf: () => (/* binding */ conf),
/* harmony export */   language: () => (/* binding */ language)
/* harmony export */ });
/* harmony import */ var _typescript_typescript_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../typescript/typescript.js */ "./node_modules/monaco-editor/esm/vs/basic-languages/typescript/typescript.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var conf = _typescript_typescript_js__WEBPACK_IMPORTED_MODULE_0__.conf;
var language = {
    // Set defaultToken to invalid to see what you do not tokenize yet
    defaultToken: 'invalid',
    tokenPostfix: '.js',
    keywords: [
        'break',
        'case',
        'catch',
        'class',
        'continue',
        'const',
        'constructor',
        'debugger',
        'default',
        'delete',
        'do',
        'else',
        'export',
        'extends',
        'false',
        'finally',
        'for',
        'from',
        'function',
        'get',
        'if',
        'import',
        'in',
        'instanceof',
        'let',
        'new',
        'null',
        'return',
        'set',
        'super',
        'switch',
        'symbol',
        'this',
        'throw',
        'true',
        'try',
        'typeof',
        'undefined',
        'var',
        'void',
        'while',
        'with',
        'yield',
        'async',
        'await',
        'of'
    ],
    typeKeywords: [],
    operators: _typescript_typescript_js__WEBPACK_IMPORTED_MODULE_0__.language.operators,
    symbols: _typescript_typescript_js__WEBPACK_IMPORTED_MODULE_0__.language.symbols,
    escapes: _typescript_typescript_js__WEBPACK_IMPORTED_MODULE_0__.language.escapes,
    digits: _typescript_typescript_js__WEBPACK_IMPORTED_MODULE_0__.language.digits,
    octaldigits: _typescript_typescript_js__WEBPACK_IMPORTED_MODULE_0__.language.octaldigits,
    binarydigits: _typescript_typescript_js__WEBPACK_IMPORTED_MODULE_0__.language.binarydigits,
    hexdigits: _typescript_typescript_js__WEBPACK_IMPORTED_MODULE_0__.language.hexdigits,
    regexpctl: _typescript_typescript_js__WEBPACK_IMPORTED_MODULE_0__.language.regexpctl,
    regexpesc: _typescript_typescript_js__WEBPACK_IMPORTED_MODULE_0__.language.regexpesc,
    tokenizer: _typescript_typescript_js__WEBPACK_IMPORTED_MODULE_0__.language.tokenizer
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX21vbmFjby1lZGl0b3JfZXNtX3ZzX2Jhc2ljLWxhbmd1YWdlc19qYXZhc2NyaXB0X2phdmFzY3JpcHRfanMuYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FGO0FBQzlFLFdBQVcsMkRBQU07QUFDakI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsK0RBQVU7QUFDekIsYUFBYSwrREFBVTtBQUN2QixhQUFhLCtEQUFVO0FBQ3ZCLFlBQVksK0RBQVU7QUFDdEIsaUJBQWlCLCtEQUFVO0FBQzNCLGtCQUFrQiwrREFBVTtBQUM1QixlQUFlLCtEQUFVO0FBQ3pCLGVBQWUsK0RBQVU7QUFDekIsZUFBZSwrREFBVTtBQUN6QixlQUFlLCtEQUFVO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm92YS1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzaWMtbGFuZ3VhZ2VzL2phdmFzY3JpcHQvamF2YXNjcmlwdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuaW1wb3J0IHsgY29uZiBhcyB0c0NvbmYsIGxhbmd1YWdlIGFzIHRzTGFuZ3VhZ2UgfSBmcm9tICcuLi90eXBlc2NyaXB0L3R5cGVzY3JpcHQuanMnO1xyXG5leHBvcnQgdmFyIGNvbmYgPSB0c0NvbmY7XHJcbmV4cG9ydCB2YXIgbGFuZ3VhZ2UgPSB7XHJcbiAgICAvLyBTZXQgZGVmYXVsdFRva2VuIHRvIGludmFsaWQgdG8gc2VlIHdoYXQgeW91IGRvIG5vdCB0b2tlbml6ZSB5ZXRcclxuICAgIGRlZmF1bHRUb2tlbjogJ2ludmFsaWQnLFxyXG4gICAgdG9rZW5Qb3N0Zml4OiAnLmpzJyxcclxuICAgIGtleXdvcmRzOiBbXHJcbiAgICAgICAgJ2JyZWFrJyxcclxuICAgICAgICAnY2FzZScsXHJcbiAgICAgICAgJ2NhdGNoJyxcclxuICAgICAgICAnY2xhc3MnLFxyXG4gICAgICAgICdjb250aW51ZScsXHJcbiAgICAgICAgJ2NvbnN0JyxcclxuICAgICAgICAnY29uc3RydWN0b3InLFxyXG4gICAgICAgICdkZWJ1Z2dlcicsXHJcbiAgICAgICAgJ2RlZmF1bHQnLFxyXG4gICAgICAgICdkZWxldGUnLFxyXG4gICAgICAgICdkbycsXHJcbiAgICAgICAgJ2Vsc2UnLFxyXG4gICAgICAgICdleHBvcnQnLFxyXG4gICAgICAgICdleHRlbmRzJyxcclxuICAgICAgICAnZmFsc2UnLFxyXG4gICAgICAgICdmaW5hbGx5JyxcclxuICAgICAgICAnZm9yJyxcclxuICAgICAgICAnZnJvbScsXHJcbiAgICAgICAgJ2Z1bmN0aW9uJyxcclxuICAgICAgICAnZ2V0JyxcclxuICAgICAgICAnaWYnLFxyXG4gICAgICAgICdpbXBvcnQnLFxyXG4gICAgICAgICdpbicsXHJcbiAgICAgICAgJ2luc3RhbmNlb2YnLFxyXG4gICAgICAgICdsZXQnLFxyXG4gICAgICAgICduZXcnLFxyXG4gICAgICAgICdudWxsJyxcclxuICAgICAgICAncmV0dXJuJyxcclxuICAgICAgICAnc2V0JyxcclxuICAgICAgICAnc3VwZXInLFxyXG4gICAgICAgICdzd2l0Y2gnLFxyXG4gICAgICAgICdzeW1ib2wnLFxyXG4gICAgICAgICd0aGlzJyxcclxuICAgICAgICAndGhyb3cnLFxyXG4gICAgICAgICd0cnVlJyxcclxuICAgICAgICAndHJ5JyxcclxuICAgICAgICAndHlwZW9mJyxcclxuICAgICAgICAndW5kZWZpbmVkJyxcclxuICAgICAgICAndmFyJyxcclxuICAgICAgICAndm9pZCcsXHJcbiAgICAgICAgJ3doaWxlJyxcclxuICAgICAgICAnd2l0aCcsXHJcbiAgICAgICAgJ3lpZWxkJyxcclxuICAgICAgICAnYXN5bmMnLFxyXG4gICAgICAgICdhd2FpdCcsXHJcbiAgICAgICAgJ29mJ1xyXG4gICAgXSxcclxuICAgIHR5cGVLZXl3b3JkczogW10sXHJcbiAgICBvcGVyYXRvcnM6IHRzTGFuZ3VhZ2Uub3BlcmF0b3JzLFxyXG4gICAgc3ltYm9sczogdHNMYW5ndWFnZS5zeW1ib2xzLFxyXG4gICAgZXNjYXBlczogdHNMYW5ndWFnZS5lc2NhcGVzLFxyXG4gICAgZGlnaXRzOiB0c0xhbmd1YWdlLmRpZ2l0cyxcclxuICAgIG9jdGFsZGlnaXRzOiB0c0xhbmd1YWdlLm9jdGFsZGlnaXRzLFxyXG4gICAgYmluYXJ5ZGlnaXRzOiB0c0xhbmd1YWdlLmJpbmFyeWRpZ2l0cyxcclxuICAgIGhleGRpZ2l0czogdHNMYW5ndWFnZS5oZXhkaWdpdHMsXHJcbiAgICByZWdleHBjdGw6IHRzTGFuZ3VhZ2UucmVnZXhwY3RsLFxyXG4gICAgcmVnZXhwZXNjOiB0c0xhbmd1YWdlLnJlZ2V4cGVzYyxcclxuICAgIHRva2VuaXplcjogdHNMYW5ndWFnZS50b2tlbml6ZXJcclxufTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9