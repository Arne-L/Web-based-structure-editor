"use strict";
(self["webpackChunknova_editor"] = self["webpackChunknova_editor"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_bicep_bicep_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   conf: () => (/* binding */ conf),
/* harmony export */   language: () => (/* binding */ language)
/* harmony export */ });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var bounded = function (text) { return "\\b" + text + "\\b"; };
var identifierStart = '[_a-zA-Z]';
var identifierContinue = '[_a-zA-Z0-9]';
var identifier = bounded("" + identifierStart + identifierContinue + "*");
var keywords = [
    'targetScope',
    'resource',
    'module',
    'param',
    'var',
    'output',
    'for',
    'in',
    'if',
    'existing'
];
var namedLiterals = ['true', 'false', 'null'];
var nonCommentWs = "[ \\t\\r\\n]";
var numericLiteral = "[0-9]+";
var conf = {
    comments: {
        lineComment: '//',
        blockComment: ['/*', '*/']
    },
    brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')']
    ],
    surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: "'", close: "'" },
        { open: "'''", close: "'''" }
    ],
    autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: "'", close: "'", notIn: ['string', 'comment'] },
        { open: "'''", close: "'''", notIn: ['string', 'comment'] }
    ],
    autoCloseBefore: ":.,=}])' \n\t",
    indentationRules: {
        increaseIndentPattern: new RegExp('^((?!\\/\\/).)*(\\{[^}"\'`]*|\\([^)"\'`]*|\\[[^\\]"\'`]*)$'),
        decreaseIndentPattern: new RegExp('^((?!.*?\\/\\*).*\\*/)?\\s*[\\}\\]].*$')
    }
};
var language = {
    defaultToken: '',
    tokenPostfix: '.bicep',
    brackets: [
        { open: '{', close: '}', token: 'delimiter.curly' },
        { open: '[', close: ']', token: 'delimiter.square' },
        { open: '(', close: ')', token: 'delimiter.parenthesis' }
    ],
    symbols: /[=><!~?:&|+\-*/^%]+/,
    keywords: keywords,
    namedLiterals: namedLiterals,
    escapes: "\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\|'|\\${)",
    tokenizer: {
        root: [{ include: '@expression' }, { include: '@whitespace' }],
        stringVerbatim: [
            { regex: "(|'|'')[^']", action: { token: 'string' } },
            { regex: "'''", action: { token: 'string.quote', next: '@pop' } }
        ],
        stringLiteral: [
            { regex: "\\${", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },
            { regex: "[^\\\\'$]+", action: { token: 'string' } },
            { regex: '@escapes', action: { token: 'string.escape' } },
            { regex: "\\\\.", action: { token: 'string.escape.invalid' } },
            { regex: "'", action: { token: 'string', next: '@pop' } }
        ],
        bracketCounting: [
            { regex: "{", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },
            { regex: "}", action: { token: 'delimiter.bracket', next: '@pop' } },
            { include: 'expression' }
        ],
        comment: [
            { regex: "[^\\*]+", action: { token: 'comment' } },
            { regex: "\\*\\/", action: { token: 'comment', next: '@pop' } },
            { regex: "[\\/*]", action: { token: 'comment' } }
        ],
        whitespace: [
            { regex: nonCommentWs },
            { regex: "\\/\\*", action: { token: 'comment', next: '@comment' } },
            { regex: "\\/\\/.*$", action: { token: 'comment' } }
        ],
        expression: [
            { regex: "'''", action: { token: 'string.quote', next: '@stringVerbatim' } },
            { regex: "'", action: { token: 'string.quote', next: '@stringLiteral' } },
            { regex: numericLiteral, action: { token: 'number' } },
            {
                regex: identifier,
                action: {
                    cases: {
                        '@keywords': { token: 'keyword' },
                        '@namedLiterals': { token: 'keyword' },
                        '@default': { token: 'identifier' }
                    }
                }
            }
        ]
    }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX21vbmFjby1lZGl0b3JfZXNtX3ZzX2Jhc2ljLWxhbmd1YWdlc19iaWNlcF9iaWNlcF9qcy5idW5kbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxRQUFRLFlBQVksR0FBRztBQUNqQyxVQUFVLHVCQUF1QjtBQUNqQyxVQUFVLHVCQUF1QjtBQUNqQyxVQUFVLHVCQUF1QjtBQUNqQyxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFVBQVUsUUFBUSxZQUFZLEdBQUc7QUFDakMsVUFBVSx1QkFBdUI7QUFDakMsVUFBVSx1QkFBdUI7QUFDakMsVUFBVSxxREFBcUQ7QUFDL0QsVUFBVTtBQUNWO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0EsOERBQThELEdBQUc7QUFDakUsMEVBQTBFO0FBQzFFO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFVBQVUsUUFBUSxZQUFZLDZCQUE2QjtBQUMzRCxVQUFVLGtEQUFrRDtBQUM1RCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsYUFBYSxrQkFBa0I7QUFDcEQ7QUFDQSxpQkFBaUIsd0JBQXdCLElBQUksd0JBQXdCO0FBQ3JFO0FBQ0EsY0FBYyxnQ0FBZ0MsbUJBQW1CO0FBQ2pFLGNBQWMsd0JBQXdCO0FBQ3RDO0FBQ0E7QUFDQSxjQUFjLFlBQVksYUFBYSx3REFBd0Q7QUFDL0YsY0FBYywrQkFBK0IsbUJBQW1CO0FBQ2hFLGNBQWMsNkJBQTZCLDBCQUEwQjtBQUNyRSxjQUFjLDBCQUEwQixrQ0FBa0M7QUFDMUUsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBLGNBQWMsU0FBUyxhQUFhLHdEQUF3RDtBQUM1RixjQUFjLFNBQVMsYUFBYSw0Q0FBNEM7QUFDaEYsY0FBYztBQUNkO0FBQ0E7QUFDQSxjQUFjLDRCQUE0QixvQkFBb0I7QUFDOUQsY0FBYywyQkFBMkIsa0NBQWtDO0FBQzNFLGNBQWMsMkJBQTJCO0FBQ3pDO0FBQ0E7QUFDQSxjQUFjLHFCQUFxQjtBQUNuQyxjQUFjLDJCQUEyQixzQ0FBc0M7QUFDL0UsY0FBYyw4QkFBOEI7QUFDNUM7QUFDQTtBQUNBLGNBQWMsd0JBQXdCLGtEQUFrRDtBQUN4RixjQUFjLHNCQUFzQixpREFBaUQ7QUFDckYsY0FBYyxpQ0FBaUMsbUJBQW1CO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGtCQUFrQjtBQUN6RCw0Q0FBNEMsa0JBQWtCO0FBQzlELHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3ZhLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNpYy1sYW5ndWFnZXMvYmljZXAvYmljZXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxudmFyIGJvdW5kZWQgPSBmdW5jdGlvbiAodGV4dCkgeyByZXR1cm4gXCJcXFxcYlwiICsgdGV4dCArIFwiXFxcXGJcIjsgfTtcclxudmFyIGlkZW50aWZpZXJTdGFydCA9ICdbX2EtekEtWl0nO1xyXG52YXIgaWRlbnRpZmllckNvbnRpbnVlID0gJ1tfYS16QS1aMC05XSc7XHJcbnZhciBpZGVudGlmaWVyID0gYm91bmRlZChcIlwiICsgaWRlbnRpZmllclN0YXJ0ICsgaWRlbnRpZmllckNvbnRpbnVlICsgXCIqXCIpO1xyXG52YXIga2V5d29yZHMgPSBbXHJcbiAgICAndGFyZ2V0U2NvcGUnLFxyXG4gICAgJ3Jlc291cmNlJyxcclxuICAgICdtb2R1bGUnLFxyXG4gICAgJ3BhcmFtJyxcclxuICAgICd2YXInLFxyXG4gICAgJ291dHB1dCcsXHJcbiAgICAnZm9yJyxcclxuICAgICdpbicsXHJcbiAgICAnaWYnLFxyXG4gICAgJ2V4aXN0aW5nJ1xyXG5dO1xyXG52YXIgbmFtZWRMaXRlcmFscyA9IFsndHJ1ZScsICdmYWxzZScsICdudWxsJ107XHJcbnZhciBub25Db21tZW50V3MgPSBcIlsgXFxcXHRcXFxcclxcXFxuXVwiO1xyXG52YXIgbnVtZXJpY0xpdGVyYWwgPSBcIlswLTldK1wiO1xyXG5leHBvcnQgdmFyIGNvbmYgPSB7XHJcbiAgICBjb21tZW50czoge1xyXG4gICAgICAgIGxpbmVDb21tZW50OiAnLy8nLFxyXG4gICAgICAgIGJsb2NrQ29tbWVudDogWycvKicsICcqLyddXHJcbiAgICB9LFxyXG4gICAgYnJhY2tldHM6IFtcclxuICAgICAgICBbJ3snLCAnfSddLFxyXG4gICAgICAgIFsnWycsICddJ10sXHJcbiAgICAgICAgWycoJywgJyknXVxyXG4gICAgXSxcclxuICAgIHN1cnJvdW5kaW5nUGFpcnM6IFtcclxuICAgICAgICB7IG9wZW46ICd7JywgY2xvc2U6ICd9JyB9LFxyXG4gICAgICAgIHsgb3BlbjogJ1snLCBjbG9zZTogJ10nIH0sXHJcbiAgICAgICAgeyBvcGVuOiAnKCcsIGNsb3NlOiAnKScgfSxcclxuICAgICAgICB7IG9wZW46IFwiJ1wiLCBjbG9zZTogXCInXCIgfSxcclxuICAgICAgICB7IG9wZW46IFwiJycnXCIsIGNsb3NlOiBcIicnJ1wiIH1cclxuICAgIF0sXHJcbiAgICBhdXRvQ2xvc2luZ1BhaXJzOiBbXHJcbiAgICAgICAgeyBvcGVuOiAneycsIGNsb3NlOiAnfScgfSxcclxuICAgICAgICB7IG9wZW46ICdbJywgY2xvc2U6ICddJyB9LFxyXG4gICAgICAgIHsgb3BlbjogJygnLCBjbG9zZTogJyknIH0sXHJcbiAgICAgICAgeyBvcGVuOiBcIidcIiwgY2xvc2U6IFwiJ1wiLCBub3RJbjogWydzdHJpbmcnLCAnY29tbWVudCddIH0sXHJcbiAgICAgICAgeyBvcGVuOiBcIicnJ1wiLCBjbG9zZTogXCInJydcIiwgbm90SW46IFsnc3RyaW5nJywgJ2NvbW1lbnQnXSB9XHJcbiAgICBdLFxyXG4gICAgYXV0b0Nsb3NlQmVmb3JlOiBcIjouLD19XSknIFxcblxcdFwiLFxyXG4gICAgaW5kZW50YXRpb25SdWxlczoge1xyXG4gICAgICAgIGluY3JlYXNlSW5kZW50UGF0dGVybjogbmV3IFJlZ0V4cCgnXigoPyFcXFxcL1xcXFwvKS4pKihcXFxce1tefVwiXFwnYF0qfFxcXFwoW14pXCJcXCdgXSp8XFxcXFtbXlxcXFxdXCJcXCdgXSopJCcpLFxyXG4gICAgICAgIGRlY3JlYXNlSW5kZW50UGF0dGVybjogbmV3IFJlZ0V4cCgnXigoPyEuKj9cXFxcL1xcXFwqKS4qXFxcXCovKT9cXFxccypbXFxcXH1cXFxcXV0uKiQnKVxyXG4gICAgfVxyXG59O1xyXG5leHBvcnQgdmFyIGxhbmd1YWdlID0ge1xyXG4gICAgZGVmYXVsdFRva2VuOiAnJyxcclxuICAgIHRva2VuUG9zdGZpeDogJy5iaWNlcCcsXHJcbiAgICBicmFja2V0czogW1xyXG4gICAgICAgIHsgb3BlbjogJ3snLCBjbG9zZTogJ30nLCB0b2tlbjogJ2RlbGltaXRlci5jdXJseScgfSxcclxuICAgICAgICB7IG9wZW46ICdbJywgY2xvc2U6ICddJywgdG9rZW46ICdkZWxpbWl0ZXIuc3F1YXJlJyB9LFxyXG4gICAgICAgIHsgb3BlbjogJygnLCBjbG9zZTogJyknLCB0b2tlbjogJ2RlbGltaXRlci5wYXJlbnRoZXNpcycgfVxyXG4gICAgXSxcclxuICAgIHN5bWJvbHM6IC9bPT48IX4/OiZ8K1xcLSovXiVdKy8sXHJcbiAgICBrZXl3b3Jkczoga2V5d29yZHMsXHJcbiAgICBuYW1lZExpdGVyYWxzOiBuYW1lZExpdGVyYWxzLFxyXG4gICAgZXNjYXBlczogXCJcXFxcXFxcXCh1e1swLTlBLUZhLWZdK318bnxyfHR8XFxcXFxcXFx8J3xcXFxcJHspXCIsXHJcbiAgICB0b2tlbml6ZXI6IHtcclxuICAgICAgICByb290OiBbeyBpbmNsdWRlOiAnQGV4cHJlc3Npb24nIH0sIHsgaW5jbHVkZTogJ0B3aGl0ZXNwYWNlJyB9XSxcclxuICAgICAgICBzdHJpbmdWZXJiYXRpbTogW1xyXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIih8J3wnJylbXiddXCIsIGFjdGlvbjogeyB0b2tlbjogJ3N0cmluZycgfSB9LFxyXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIicnJ1wiLCBhY3Rpb246IHsgdG9rZW46ICdzdHJpbmcucXVvdGUnLCBuZXh0OiAnQHBvcCcgfSB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICBzdHJpbmdMaXRlcmFsOiBbXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiXFxcXCR7XCIsIGFjdGlvbjogeyB0b2tlbjogJ2RlbGltaXRlci5icmFja2V0JywgbmV4dDogJ0BicmFja2V0Q291bnRpbmcnIH0gfSxcclxuICAgICAgICAgICAgeyByZWdleDogXCJbXlxcXFxcXFxcJyRdK1wiLCBhY3Rpb246IHsgdG9rZW46ICdzdHJpbmcnIH0gfSxcclxuICAgICAgICAgICAgeyByZWdleDogJ0Blc2NhcGVzJywgYWN0aW9uOiB7IHRva2VuOiAnc3RyaW5nLmVzY2FwZScgfSB9LFxyXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIlxcXFxcXFxcLlwiLCBhY3Rpb246IHsgdG9rZW46ICdzdHJpbmcuZXNjYXBlLmludmFsaWQnIH0gfSxcclxuICAgICAgICAgICAgeyByZWdleDogXCInXCIsIGFjdGlvbjogeyB0b2tlbjogJ3N0cmluZycsIG5leHQ6ICdAcG9wJyB9IH1cclxuICAgICAgICBdLFxyXG4gICAgICAgIGJyYWNrZXRDb3VudGluZzogW1xyXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIntcIiwgYWN0aW9uOiB7IHRva2VuOiAnZGVsaW1pdGVyLmJyYWNrZXQnLCBuZXh0OiAnQGJyYWNrZXRDb3VudGluZycgfSB9LFxyXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIn1cIiwgYWN0aW9uOiB7IHRva2VuOiAnZGVsaW1pdGVyLmJyYWNrZXQnLCBuZXh0OiAnQHBvcCcgfSB9LFxyXG4gICAgICAgICAgICB7IGluY2x1ZGU6ICdleHByZXNzaW9uJyB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICBjb21tZW50OiBbXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiW15cXFxcKl0rXCIsIGFjdGlvbjogeyB0b2tlbjogJ2NvbW1lbnQnIH0gfSxcclxuICAgICAgICAgICAgeyByZWdleDogXCJcXFxcKlxcXFwvXCIsIGFjdGlvbjogeyB0b2tlbjogJ2NvbW1lbnQnLCBuZXh0OiAnQHBvcCcgfSB9LFxyXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIltcXFxcLypdXCIsIGFjdGlvbjogeyB0b2tlbjogJ2NvbW1lbnQnIH0gfVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgd2hpdGVzcGFjZTogW1xyXG4gICAgICAgICAgICB7IHJlZ2V4OiBub25Db21tZW50V3MgfSxcclxuICAgICAgICAgICAgeyByZWdleDogXCJcXFxcL1xcXFwqXCIsIGFjdGlvbjogeyB0b2tlbjogJ2NvbW1lbnQnLCBuZXh0OiAnQGNvbW1lbnQnIH0gfSxcclxuICAgICAgICAgICAgeyByZWdleDogXCJcXFxcL1xcXFwvLiokXCIsIGFjdGlvbjogeyB0b2tlbjogJ2NvbW1lbnQnIH0gfVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgZXhwcmVzc2lvbjogW1xyXG4gICAgICAgICAgICB7IHJlZ2V4OiBcIicnJ1wiLCBhY3Rpb246IHsgdG9rZW46ICdzdHJpbmcucXVvdGUnLCBuZXh0OiAnQHN0cmluZ1ZlcmJhdGltJyB9IH0sXHJcbiAgICAgICAgICAgIHsgcmVnZXg6IFwiJ1wiLCBhY3Rpb246IHsgdG9rZW46ICdzdHJpbmcucXVvdGUnLCBuZXh0OiAnQHN0cmluZ0xpdGVyYWwnIH0gfSxcclxuICAgICAgICAgICAgeyByZWdleDogbnVtZXJpY0xpdGVyYWwsIGFjdGlvbjogeyB0b2tlbjogJ251bWJlcicgfSB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZWdleDogaWRlbnRpZmllcixcclxuICAgICAgICAgICAgICAgIGFjdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdAa2V5d29yZHMnOiB7IHRva2VuOiAna2V5d29yZCcgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0BuYW1lZExpdGVyYWxzJzogeyB0b2tlbjogJ2tleXdvcmQnIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdAZGVmYXVsdCc6IHsgdG9rZW46ICdpZGVudGlmaWVyJyB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXVxyXG4gICAgfVxyXG59O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=