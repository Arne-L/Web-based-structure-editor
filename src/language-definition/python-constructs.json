[
    {
        "keyword": "while",
        "editorName": "while --- :",
        "format": [
            {
                "type": "token",
                "value": "while "
            },
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " :"
            },
            {
                "type": "body"
            }
        ],
        "holes": [
            [
                {
                    "name": "condition",
                    "optional": false
                }
            ]
        ],
        "match": "while",
        "triggerInsertion": [
            " ",
            "("
        ],
        "toolbox": {
            "category": "Loops",
            "title": "while loop",
            "tooltip": {
                "title": "repeatedly execute code while true",
                "body": "repeatedly executes the code block inside the while loop as long as the condition remains `True`."
            },
            "tips": [
                {
                    "type": "executable",
                    "title": "infinite loop",
                    "id": "ex-while-1",
                    "example": "while True :\n\tprint(\"an infinite loop\")"
                },
                {
                    "type": "executable",
                    "title": "count from 0 to 10",
                    "id": "ex-while-2",
                    "example": "i = 0\nwhile i < 10:\n\tprint(i)\n\ti = i + 1"
                },
                {
                    "type": "quick",
                    "title": "compare to scratch's repeat until block",
                    "text": "the `while` loop in Python compared to the `repeat until` block in Scratch: the `while` loop in Python repeats code as long as the condition is `True`, and stops when the condition becomes `False`. However, the `repeat until` block in Scratch repeats code as long as the condition is `False`, and stops when the condition becomes `True`."
                },
                {
                    "type": "use-case",
                    "title": "repeatedly increment a variable",
                    "path": "https://cdn.majeed.cc/pydoc/images/use-cases/1-while-counter/",
                    "max": 30,
                    "prefix": "Slide",
                    "extension": "PNG",
                    "id": "while-increment-var",
                    "explanations": [
                        {
                            "slide": 7,
                            "text": "i is less than 3 so the condition holds true"
                        },
                        {
                            "slide": 28,
                            "text": "i is no longer less than 3 so the condition is false"
                        },
                        {
                            "slide": 29,
                            "text": "should execute the next line after the while loop"
                        }
                    ]
                }
            ],
            "search-queries": [
                "while",
                "repeat",
                "repeat while",
                "repeat until",
                "loop",
                "condition",
                "conditional",
                "repeat condition"
            ]
        }
    },
    {
        "keyword": "for",
        "editorName": "for -- in --- :",
        "format": [
            {
                "type": "token",
                "value": "for "
            },
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " in "
            },
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " :"
            },
            {
                "type": "body"
            }
        ],
        "holes": [
            [
                {
                    "name": "condition",
                    "optional": false
                }
            ],
            [
                {
                    "name": "iterable",
                    "optional": false
                }
            ]
        ],
        "match": "for",
        "triggerInsertion": [
            " "
        ],
        "toolbox": {
            "category": "Loops",
            "title": "for loop",
            "tooltip": {
                "title": "loop through a sequence of elements",
                "body": "executes a set of statements for each element in a sequence (like a `range`, a `list`, or a `string`). "
            },
            "tips": [
                {
                    "type": "quick",
                    "title": "for loop inputs",
                    "text": "for loops have two inputs: a variable name, and a sequence of items. the created variable is used to hold the current item, and the sequence is the list of items to go through."
                },
                {
                    "type": "quick",
                    "title": "for loop as a counter",
                    "text": "for loops can be used with the `range` function to work like a counter"
                },
                {
                    "type": "executable",
                    "title": "using a for loop to go through a list",
                    "id": "ex-for-list-items",
                    "example": "lst = [\"cat\", \"dog\", \"mouse\", \"parrot\"]\nfor animal in lst:\n\tprint(animal)"
                },
                {
                    "type": "use-case",
                    "title": "go through a list of items",
                    "path": "https://cdn.majeed.cc/pydoc/images/use-cases/2-for-loop-list/",
                    "max": 25,
                    "extension": "PNG",
                    "prefix": "Slide",
                    "id": "loop-list-items"
                },
                {
                    "type": "use-case",
                    "title": "go through a sequence of numbers",
                    "path": "https://cdn.majeed.cc/pydoc/images/use-cases/3-for-loop-range/",
                    "max": 21,
                    "extension": "PNG",
                    "prefix": "Slide",
                    "id": "loop-sequence-nums"
                },
                {
                    "type": "use-case",
                    "title": "go through a list of items using indices",
                    "path": "https://cdn.majeed.cc/pydoc/images/use-cases/4-for-loop-range-list/",
                    "max": 30,
                    "extension": "PNG",
                    "prefix": "Slide",
                    "id": "loop-list-items-using-indices"
                },
                {
                    "type": "use-case",
                    "title": "go through every character of a string",
                    "path": "https://cdn.majeed.cc/pydoc/images/use-cases/5-for-loop-string/",
                    "max": 21,
                    "extension": "PNG",
                    "prefix": "Slide",
                    "id": "loop-chars-of-str"
                }
            ],
            "search-queries": [
                "for",
                "loop",
                "repeat",
                "go through",
                "iterate",
                "list"
            ]
        }
    },
    {
        "internalName": "standard_method",
        "format": [
            {
                "type": "implementation",
                "anchor": "method_name"
            },
            {
                "type": "token",
                "value": "("
            },
            {
                "type": "hole",
                "delimiter": ", "
            },
            {
                "type": "token",
                "value": ")"
            }
        ],
        "triggerInsertion": [
            "("
        ],
        "implementations": [
            {
                "keyword": "range",
                "method_name": "range",
                "constructType": "expression",
                "holes": [
                    [
                        {
                            "name": "number",
                            "optional": false
                        }
                    ]
                ],
                "editorName": "range(---)",
                "match": "range",
                "toolbox": {
                    "category": "Loops",
                    "title": "range(end: number)",
                    "tooltip": {
                        "title": "Create Iterable Sequence",
                        "body": "Generates a sequence of numbers from 0 to the provided input. Usually used with a for loop."
                    },
                    "tips": [
                        {
                            "type": "executable",
                            "id": "ex-range",
                            "example": "for i in range(10):\n\tprint(i)"
                        }
                    ],
                    "search-queries": [
                        "range",
                        "sequence",
                        "iterate",
                        "for loop"
                    ]
                }
            },
            {
                "keyword": "print",
                "method_name": "print",
                "holes": [
                    [
                        {
                            "name": "text",
                            "optional": false
                        }
                    ]
                ],
                "editorName": "print(---)",
                "match": "print",
                "toolbox": {
                    "category": "Functions",
                    "title": "print(message: any)",
                    "tooltip": {
                        "title": "Display Text in Console",
                        "body": "Displays the textual value of its input in the console."
                    },
                    "invalidTooltip": "Can only be inserted on an empty line within a loop.",
                    "tips": [
                        {
                            "type": "executable",
                            "id": "ex-print-num-str",
                            "example": "print(123)\nprint(\"Hello World!\")"
                        },
                        {
                            "type": "executable",
                            "id": "ex-print-var",
                            "example": "a = \"abc\"\nprint(a)"
                        }
                    ],
                    "search-queries": [
                        "output",
                        "say",
                        "print",
                        "print output",
                        "console",
                        "write",
                        "see output"
                    ]
                }
            },
            {
                "keyword": "input",
                "constructType": "expression",
                "method_name": "input",
                "holes": [
                    [
                        {
                            "name": "text",
                            "optional": false
                        }
                    ]
                ],
                "editorName": "input(---)",
                "match": "input",
                "toolbox": {
                    "category": "Functions",
                    "title": "input(prompt: text)",
                    "tooltip": {
                        "title": "Ask User for Textual Input",
                        "body": "Displays a message that prompts the user to enter some text. The entered text will be returned."
                    },
                    "tips": [
                        {
                            "type": "executable",
                            "id": "ex-input-1",
                            "example": "name = input(\"Hi! What’s your name?\")\nprint(name)"
                        }
                    ],
                    "search-queries": [
                        "input",
                        "prompt",
                        "text",
                        "user",
                        "ask input",
                        "ask user"
                    ]
                }
            },
            {
                "keyword": "len",
                "constructType": "expression",
                "method_name": "len",
                "holes": [
                    [
                        {
                            "name": "collection",
                            "optional": false
                        }
                    ]
                ],
                "editorName": "len(---)",
                "match": "len",
                "toolbox": {
                    "category": "Functions",
                    "title": "len(iterable: list/text)",
                    "tooltip": {
                        "title": "Get Length of List or Text",
                        "body": "Returns the number of items in an object, or the number of characters in a text."
                    },
                    "tips": [
                        {
                            "type": "executable",
                            "id": "ex-len-1",
                            "example": "greeting = \"Hello World!\"\na = len(greeting)\nprint(a)"
                        },
                        {
                            "type": "executable",
                            "id": "ex-len-2",
                            "example": "items = [1, 2, 3]\na = len(items)\nprint(a)"
                        }
                    ],
                    "search-queries": [
                        "length of list",
                        "length of string",
                        "length of text"
                    ]
                }
            },
            {
                "keyword": "choice",
                "constructType": "expression",
                "method_name": "choice",
                "holes": [
                    [
                        {
                            "name": "collection",
                            "optional": false
                        }
                    ]
                ],
                "editorName": "choice(---)",
                "match": "choice",
                "toolbox": {
                    "category": "Random",
                    "title": "choice(choices: list[any])",
                    "tooltip": {
                        "title": "Insert Choice from List",
                        "body": "Randomly selects and returns an item from the given list. Needs to be imported from the random module."
                    },
                    "tips": [
                        {
                            "type": "executable",
                            "id": "ex-choice",
                            "example": "from random import choice\n\nif choice([1, 2, 3, 4, 5, 6]) == 6:\n\tprint(\"Rolled Six!\")"
                        }
                    ],
                    "search-queries": [
                        "choice",
                        "random choice",
                        "choose randomly from list",
                        "select randomly from array"
                    ]
                }
            },
            {
                "keyword": "randint",
                "constructType": "expression",
                "method_name": "randint",
                "holes": [
                    [
                        {
                            "name": "number1",
                            "optional": false
                        },
                        {
                            "name": "number1",
                            "optional": false
                        }
                    ]
                ],
                "editorName": "randint(---, ---)",
                "match": "randint",
                "toolbox": {
                    "category": "Random",
                    "title": "randint(min: number, max: number)",
                    "tooltip": {
                        "title": "Generate a Random Number",
                        "body": "Returns a randomly generated number from the given range. Needs to be imported from the random module."
                    },
                    "tips": [
                        {
                            "type": "executable",
                            "id": "ex-randint",
                            "example": "a = randint(0, 10)\nprint(a)"
                        }
                    ],
                    "search-queries": [
                        "random number",
                        "random integer",
                        "randint",
                        "random between"
                    ]
                }
            }
        ]
    },
    {
        "keyword": "break",
        "editorName": "break",
        "requiresAncestor": [
            {
                "ref": "while",
                "min_level": 0,
                "max_level": null
            },
            "for"
        ],
        "format": [
            {
                "type": "token",
                "value": "break"
            }
        ],
        "match": "brea",
        "triggerInsertion": [
            "k"
        ],
        "toolbox": {
            "category": "Loops",
            "title": "Break out of loops",
            "tooltip": {
                "title": "Insert Break inside Loop",
                "body": "Stops the innermost running loop (for, while) and breaks out of it."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-break-out-range",
                    "example": "for i in range(0, 50):\n\tif i == 25:\n\t\tbreak\n\tprint(i)"
                },
                {
                    "type": "use-case",
                    "title": "break out of a while loop on some condition",
                    "path": "https://cdn.majeed.cc/pydoc/images/use-cases/3-break/",
                    "max": 30,
                    "extension": "PNG",
                    "prefix": "Slide",
                    "id": "break-while-on-condition",
                    "explanations": [
                        {
                            "slide": 5,
                            "text": "variable i is defined and set to 0"
                        },
                        {
                            "slide": 6,
                            "text": "should repeat the while statements if i < 10"
                        },
                        {
                            "slide": 7,
                            "text": "i is 0 and less than 10 -> should repeat"
                        },
                        {
                            "slide": 9,
                            "text": "i is 0, so i + 1 is 1"
                        },
                        {
                            "slide": 11,
                            "text": "i becomes 1"
                        },
                        {
                            "slide": 12,
                            "text": "should enter the if statements if i equals 3"
                        },
                        {
                            "slide": 13,
                            "text": "i is 1 so shouldn't enter the if"
                        },
                        {
                            "slide": 16,
                            "text": "i is 1, so i + 1 is 2"
                        },
                        {
                            "slide": 14,
                            "text": "should continue repeating because i is 1"
                        },
                        {
                            "slide": 18,
                            "text": "i becomes 2"
                        },
                        {
                            "slide": 20,
                            "text": "i is not equal to 3"
                        },
                        {
                            "slide": 21,
                            "text": "should continue repeating because i is 2"
                        },
                        {
                            "slide": 23,
                            "text": "i is 2, so i + 1 is 3"
                        },
                        {
                            "slide": 25,
                            "text": "i becomes 3"
                        },
                        {
                            "slide": 27,
                            "text": "is equal to 3 -> should enter if"
                        },
                        {
                            "slide": 28,
                            "text": "break out of the current loop"
                        },
                        {
                            "slide": 29,
                            "text": "won't check the while condition as we used break"
                        },
                        {
                            "slide": 30,
                            "text": "will print 'done'"
                        }
                    ]
                }
            ],
            "search-queries": [
                "exit",
                "loop",
                "break"
            ]
        }
    },
    {
        "keyword": "if",
        "editorName": "if --- :",
        "format": [
            {
                "type": "token",
                "value": "if "
            },
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " :"
            },
            {
                "type": "body"
            }
        ],
        "requiringConstructs": [
            {
                "ref": "elif",
                "optional": true,
                "min_repeat": 0,
                "max_repeat": null
            },
            {
                "ref": "else",
                "optional": true,
                "min_repeat": 0,
                "max_repeat": 1
            }
        ],
        "holes": [
            [
                {
                    "name": "condition",
                    "optional": false
                }
            ]
        ],
        "match": "if",
        "triggerInsertion": [
            " ",
            "("
        ],
        "toolbox": {
            "category": "Conditionals",
            "title": "if statement",
            "tooltip": {
                "title": "Insert If Statement",
                "body": "Will only execute the indented block of code below it when the condition is true"
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-if-1",
                    "example": "a = 3\nif a < 10:\n\tprint(\"Success!\")"
                },
                {
                    "type": "executable",
                    "id": "ex-if-2",
                    "example": "a = 3\nif a > 10:\n\tprint(\"Success!\")"
                },
                {
                    "type": "use-case",
                    "title": "check the value of a variable",
                    "path": "https://cdn.majeed.cc/pydoc/images/use-cases/6-if/",
                    "max": 13,
                    "extension": "PNG",
                    "prefix": "Slide",
                    "id": "check-val-variable"
                }
            ],
            "search-queries": [
                "if",
                "condition",
                "conditional",
                "choose",
                "path"
            ]
        }
    },
    {
        "keyword": "else",
        "editorName": "else :",
        "requiresConstruct": "if",
        "format": [
            {
                "type": "token",
                "value": "else:"
            },
            {
                "type": "body"
            }
        ],
        "match": "else",
        "triggerInsertion": [
            " "
        ],
        "toolbox": {
            "category": "Conditionals",
            "invalidTooltip": "Can only be inserted directly below an if or elif statement.",
            "title": "else statement",
            "tooltip": {
                "title": "Insert Else Statement",
                "body": "Can be used after an if or an elif statement. will execute its block of code when the if and the elif statements were not true"
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-else-1",
                    "example": "a = 2\nif a > 3:\n\tprint(3)\nelif a > 4:\n\tprint(4)\nelif a == 5:\n\tprint(5)\nelif a > 6:\n\tprint(6)\nelse:\n\tprint(\"None of the above are true.\")"
                }
            ],
            "search-queries": [
                "else",
                "otherwise",
                "if"
            ]
        }
    },
    {
        "keyword": "elif",
        "editorName": "elif --- :",
        "requiresConstruct": "if",
        "format": [
            {
                "type": "token",
                "value": "elif "
            },
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " :"
            },
            {
                "type": "body"
            }
        ],
        "holes": [
            [
                {
                    "name": "condition",
                    "optional": false
                }
            ]
        ],
        "match": "elif",
        "triggerInsertion": [
            " ",
            "("
        ],
        "toolbox": {
            "category": "Conditionals",
            "invalidTooltip": "Can only be inserted directly below an if statement.",
            "title": "elif statement",
            "tooltip": {
                "title": "Insert Elif Statement",
                "body": "Short for else-if; adds another case to an existing if statement. The `elif` will only run when previous `if` or `elif` statement is false"
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-elif-1",
                    "example": "a = 3\nif a > 10:\n\tprint(\"a is larger than 10\")\nelif a < 10:\n\tprint(\"a is smaller than 10\")"
                },
                {
                    "type": "executable",
                    "id": "ex-elif-2",
                    "example": "a = 5\nif a > 3:\n\tprint(3)\nelif a > 4:\n\tprint(4)\nelif a == 5:\n\tprint(5)\nelif a > 6:\n\tprint(6)"
                },
                {
                    "type": "use-case",
                    "title": "using elif after an if statement",
                    "path": "https://cdn.majeed.cc/pydoc/images/use-cases/7-if-single-elif/",
                    "max": 11,
                    "extension": "PNG",
                    "prefix": "Slide",
                    "id": "elif-after-if"
                },
                {
                    "type": "use-case",
                    "title": "using elif after another elif statement",
                    "path": "https://cdn.majeed.cc/pydoc/images/use-cases/7-if-double-elif/",
                    "max": 13,
                    "extension": "PNG",
                    "prefix": "Slide",
                    "id": "elif-after-elif"
                }
            ],
            "search-queries": [
                "else if",
                "else",
                "else condition",
                "choose",
                "path",
                "elif"
            ]
        }
    },
    {
        "keyword": "varAssign",
        "editorName": "-- = ---",
        "format": [
            {
                "type": "identifier",
                "regex": "^[^\\d\\W]\\w*$"
            },
            {
                "type": "token",
                "value": " = "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "expression",
                    "optional": false
                }
            ]
        ],
        "match": null,
        "matchRegex": "^([^\\d\\W]\\w*)$",
        "triggerInsertion": [
            "=",
            " "
        ],
        "toolbox": {
            "category": "Variables",
            "title": "Create/Reassign Variable",
            "tooltip": {
                "title": "Create Variable Assignment",
                "body": "Allows to store a value and give it a name to reference it by later."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-declare-print-var",
                    "example": "name = \"John\"\nprint(name)"
                },
                {
                    "type": "quick",
                    "text": "A variable is created the moment you first assign a value to it."
                },
                {
                    "type": "bullet-point",
                    "title": "variable naming",
                    "bullets": [
                        "Variable names can only contain letters, numbers, and underscores",
                        "Variable names are case-sensitive (\"x\" and \"X\" are different)",
                        "A variable name must start with a letter or the underscore character",
                        "A variable name cannot start with a number"
                    ]
                }
            ],
            "search-queries": [
                "create new variable",
                "variable",
                "var"
            ]
        }
    },
    {
        "keyword": "varReference",
        "constructType": "expression",
        "editorName": "x",
        "format": [
            {
                "type": "reference",
                "to": "variable"
            }
        ],
        "match": "--",
        "matchRegex": null,
        "triggerInsertion": [
            " "
        ],
        "toolbox": {
            "category": "Variables",
            "title": "Reference Variable",
            "tooltip": {
                "title": "Reference Variable",
                "body": "Refers to the value stored in the specified variable."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-declare-print-var",
                    "example": "name = \"John\"\nprint(name)"
                },
                {
                    "type": "quick",
                    "text": "References only exist for variables that have been created or assigned a value."
                },
                {
                    "type": "quick",
                    "text": "Reference names follow the same rules as variable names."
                }
            ],
            "search-queries": [
                "reference variable",
                "variable",
                "var"
            ]
        }
    },
    {
        "keyword": "addAssign",
        "editorName": "x += ---",
        "format": [
            {
                "type": "reference",
                "to": "variable"
            },
            {
                "type": "token",
                "value": " += "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "expression",
                    "optional": false
                }
            ]
        ],
        "match": "--",
        "matchRegex": null,
        "triggerInsertion": [
            "+"
        ],
        "toolbox": {
            "category": "Variables",
            "title": "Add to Variable",
            "tooltip": {
                "title": "Add Value to Variable",
                "body": "Adds the value on the right-hand side of the += sign to the specified variable and stores the result in the variable."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-var-sum-by-val",
                    "example": "a = 2\na += 2\nprint(a)"
                }
            ],
            "search-queries": [
                "add to variable"
            ]
        }
    },
    {
        "keyword": "subAssign",
        "editorName": "x -= ---",
        "format": [
            {
                "type": "reference",
                "to": "variable"
            },
            {
                "type": "token",
                "value": " -= "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "expression",
                    "optional": false
                }
            ]
        ],
        "match": "-",
        "matchRegex": null,
        "triggerInsertion": [],
        "toolbox": {
            "category": "Variables",
            "title": "Subtract from Variable",
            "tooltip": {
                "title": "Subtract Value from Variable",
                "body": "Subtracts the value on the right-hand side of the -= sign from the specified variable and stores the result back in the variable."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-var-sub-by-val",
                    "example": "a = 5\na -= 2\nprint(a)"
                }
            ],
            "search-queries": [
                "subtract from variable",
                "deduct from variable"
            ]
        }
    },
    {
        "keyword": "multAssign",
        "editorName": "x *= ---",
        "format": [
            {
                "type": "reference",
                "to": "variable"
            },
            {
                "type": "token",
                "value": " *= "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "expression",
                    "optional": false
                }
            ]
        ],
        "match": "--",
        "matchRegex": null,
        "triggerInsertion": [
            "*"
        ],
        "toolbox": {
            "category": "Variables",
            "title": "Multiply a Variable",
            "tooltip": {
                "title": "Multiply Variable by Value",
                "body": "Multiplies the variable by the value on the right-hand side of the *= sign and stores the result back in the variable."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-var-mul-by-val",
                    "example": "a = 5\na *= 2\nprint(a)"
                }
            ],
            "search-queries": [
                "multiply variable"
            ]
        }
    },
    {
        "keyword": "divAssign",
        "editorName": "x /= ---",
        "format": [
            {
                "type": "reference",
                "to": "variable"
            },
            {
                "type": "token",
                "value": " /= "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "expression",
                    "optional": false
                }
            ]
        ],
        "match": "--",
        "matchRegex": null,
        "triggerInsertion": [
            "/"
        ],
        "toolbox": {
            "category": "Variables",
            "title": "Divide a Variable",
            "tooltip": {
                "title": "Divide Variable by Value",
                "body": "Divides the variable by the value given on the right-hand side of the /= sign and stores the result back in the variable."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-var-divide-by-value",
                    "example": "a = 10\na /= 2\nprint(a)"
                }
            ],
            "search-queries": [
                "divide variable"
            ]
        }
    },
    {
        "keyword": "numberLit",
        "constructType": "expression",
        "editorName": "0",
        "format": [
            {
                "type": "editable",
                "value": "0",
                "regex": "^(([+-][0-9]+)|(([+-][0-9]*)\\.([0-9]+))|([0-9]*)|(([0-9]*)\\.([0-9]*)))$"
            }
        ],
        "holes": [],
        "match": "",
        "matchRegex": "^(([+-][0-9]+)|(([+-][0-9]*)\\.([0-9]+))|([0-9]*)|(([0-9]*)\\.([0-9]*)))$",
        "triggerInsertion": [],
        "toolbox": {
            "category": "Numbers",
            "title": "123",
            "tooltip": {
                "title": "Insert a Number",
                "body": "Inserts a number and edit its value."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-num",
                    "example": "age = 21\nprint(age)\nprint(21)"
                }
            ]
        }
    },
    {
        "keyword": "stringLit",
        "constructType": "expression",
        "editorName": "''",
        "format": [
            {
                "type": "token",
                "value": "'"
            },
            {
                "type": "editable",
                "regex": "^([^\\r\\n\\\"]*)$"
            },
            {
                "type": "token",
                "value": "'"
            }
        ],
        "holes": [],
        "match": "",
        "matchRegex": "^([^\\r\\n\\\"]*)$",
        "triggerInsertion": [
            "'"
        ],
        "toolbox": {
            "category": "Text",
            "title": "text",
            "tooltip": {
                "title": "Insert a Text",
                "body": "Inserts an editable text that is wrapped by double quotes."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-assign-str",
                    "example": "fruit = \"apple\"\nprint(fruit)\nprint(\"apple\")"
                }
            ],
            "search-queries": [
                "create text",
                "create string",
                "empty string",
                "empty text"
            ]
        }
    },
    {
        "keyword": "fstringLit",
        "constructType": "expression",
        "editorName": "f''",
        "format": [
            {
                "type": "token",
                "value": "f'"
            },
            {
                "type": "editable",
                "regex": "^([^\\r\\n\\\"]*)$"
            },
            {
                "type": "token",
                "value": "'"
            }
        ],
        "holes": [],
        "match": "f",
        "matchRegex": "^([^\\r\\n\\\"]*)$",
        "triggerInsertion": [
            "'"
        ],
        "toolbox": {
            "category": "Text",
            "title": "formatted text",
            "tooltip": {
                "title": "Insert Formattable Text",
                "body": "Inserts an editable, formattable text; used along with the {} operator to include non-static values and variables inside the text."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-f-str-1",
                    "example": "age = 16\nname = \"Alex\"\nprint(f'My name is {name} and I am {age} years old')"
                }
            ],
            "search-queries": [
                "formatted string",
                "formatted text"
            ]
        }
    },
    {
        "keyword": "list",
        "constructType": "expression",
        "editorName": "[---]",
        "format": [
            {
                "type": "token",
                "value": "["
            },
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": "]"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand",
                    "optional": false
                }
            ]
        ],
        "match": "",
        "matchRegex": null,
        "triggerInsertion": [
            "["
        ],
        "toolbox": {
            "category": "Lists",
            "title": "List",
            "tooltip": {
                "title": "Insert Editable List",
                "body": "Inserts an empty list. Press comma before or after each item to add a new empty item."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-list-1",
                    "example": "a = []\nprint(a) # a is an empty list\na = [1, 2, 3]\nprint(a) # a is a list with three items"
                },
                {
                    "type": "executable",
                    "id": "ex-list-1",
                    "example": "a = [\"cat\", \"dog\", \"parrot\"]\nb = [1, \"cat\", true]\nc = [1, [1, \"dog\"], \"cat\", [true]]"
                }
            ],
            "search-queries": [
                "empty list",
                "create empty list",
                "create list",
                "array",
                "create empty array"
            ]
        }
    },
    {
        "keyword": "addBinExpr",
        "constructType": "expression",
        "editorName": "--- + ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " + "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": null,
        "matchRegex": "^(\\d*|--)(?:\\s+\\s(\\d*))?$",
        "triggerInsertion": [
            "+"
        ],
        "toolbox": {
            "category": "Arithmetics",
            "title": "add",
            "tooltip": {
                "title": "Insert Addition",
                "body": "Adds the values to the left and right of the operator."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-sum-numbers",
                    "example": "a = 2\nb = 5\nprint((a + b))"
                },
                {
                    "type": "executable",
                    "id": "ex-sum-strings",
                    "example": "a = \"hello\"\nb = \"world\"\nprint((a + \" \" + b))"
                }
            ],
            "search-queries": [
                "add",
                "sum"
            ]
        }
    },
    {
        "keyword": "subBinExpr",
        "constructType": "expression",
        "editorName": "--- - ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " - "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": "-",
        "matchRegex": null,
        "triggerInsertion": [],
        "toolbox": {
            "category": "Arithmetics",
            "title": "subtract",
            "tooltip": {
                "title": "Insert Subtraction",
                "body": "Subtracts the value to the right of the operator from the value to the left."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-sub-vars",
                    "example": "a = 20\nb = 10\nprint((a - b))"
                }
            ],
            "search-queries": [
                "subtract numbers",
                "subtraction",
                "deduct"
            ]
        }
    },
    {
        "keyword": "minUnExpr",
        "constructType": "expression",
        "editorName": "- ---",
        "format": [
            {
                "type": "token",
                "value": "-"
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand",
                    "optional": false
                }
            ]
        ],
        "match": "-",
        "matchRegex": null,
        "triggerInsertion": [],
        "toolbox": {
            "category": "Arithmetics",
            "title": "subtract",
            "tooltip": {
                "title": "Insert Negative Number",
                "body": "Negates the value to the right of the operator."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-negate-number",
                    "example": "a = -2\nb = -5\nprint((a + b))"
                }
            ],
            "search-queries": [
                "substract",
                "negate",
                "negative"
            ]
        }
    },
    {
        "keyword": "multBinExpr",
        "constructType": "expression",
        "editorName": "--- * ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " * "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": "",
        "matchRegex": null,
        "triggerInsertion": [
            "*"
        ],
        "toolbox": {
            "category": "Arithmetics",
            "title": "multiply",
            "tooltip": {
                "title": "Insert Multiplication",
                "body": "Multiplies the values to the left and right of the operator."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-mul-vars",
                    "example": "a = 2\nb = 5\nprint((b * a))"
                }
            ],
            "search-queries": [
                "multiply numbers",
                "multiply"
            ]
        }
    },
    {
        "keyword": "divBinExpr",
        "constructType": "expression",
        "editorName": "--- / ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " / "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": "",
        "matchRegex": null,
        "triggerInsertion": [
            "/"
        ],
        "toolbox": {
            "category": "Arithmetics",
            "title": "divide",
            "tooltip": {
                "title": "Insert Division",
                "body": "Divides the values to the left of the operator by the right value."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-div-two-vars",
                    "example": "a = 2\nb = 10\nprint((b / a))"
                }
            ],
            "search-queries": [
                "divide",
                "division",
                "divide numbers"
            ]
        }
    },
    {
        "keyword": "floorBinExpr",
        "constructType": "expression",
        "editorName": "--- // ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " // "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": "/",
        "matchRegex": null,
        "triggerInsertion": [
            "/"
        ],
        "toolbox": {
            "category": "Arithmetics",
            "title": "floor division",
            "tooltip": {
                "title": "Insert Floor Division",
                "body": "Performs integer division (remainder is discarded and always result is always rounded down) between the values to the left and right of the operator."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-floor-div",
                    "example": "a = 2\nb = 7\nprint((b / a))"
                }
            ],
            "search-queries": [
                "divide numbers",
                "divide integer",
                "divide floor"
            ]
        }
    },
    {
        "keyword": "modBinExpr",
        "constructType": "expression",
        "editorName": "--- % ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " % "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": "",
        "matchRegex": null,
        "triggerInsertion": [
            "%"
        ],
        "toolbox": {
            "category": "Arithmetics",
            "title": "modulo",
            "tooltip": {
                "title": "Insert Modulo",
                "body": "Calculates the remainder of the division between the values to the left and right of the operator."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-modulo",
                    "example": "print((29 % 5)) # prints 4\nprint((28 % 5)) # prints 3\nprint((27 % 5)) # prints 2\nprint((26 % 5)) # prints 1\nprint((25 % 5)) # prints 0"
                }
            ],
            "search-queries": [
                "modulo",
                "remainder"
            ]
        }
    },
    {
        "keyword": "equalBinExpr",
        "constructType": "expression",
        "editorName": "--- == ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " == "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": "=",
        "matchRegex": null,
        "triggerInsertion": [
            "="
        ],
        "toolbox": {
            "category": "Comparisons",
            "title": "Is Equal?",
            "tooltip": {
                "title": "Is Equal?",
                "body": "Compares two values. Returns True if they are equal; returns False otherwise."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-is-eq-1",
                    "example": "a = 2\nb = 3\nif a == c:\n\tprint(\"a is equal to c\")\n\nif b == a:\n\tprint(\"This will not print because the condition is false.\")"
                },
                {
                    "type": "executable",
                    "id": "ex-is-eq-2",
                    "example": "a = 5\nb = 5\nwhile a == b:\n\ta += 1\nprint(a)\nprint(a)"
                }
            ],
            "search-queries": [
                "compare equal",
                "check equal",
                "are equal"
            ]
        }
    },
    {
        "keyword": "notEqualBinExpr",
        "constructType": "expression",
        "editorName": "--- != ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " != "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": "!",
        "matchRegex": null,
        "triggerInsertion": [
            "="
        ],
        "toolbox": {
            "category": "Comparisons",
            "title": "Is Not Equal?",
            "tooltip": {
                "title": "Is Not Equal?",
                "body": "Compares two values. Returns True if they are not equal; returns False otherwise."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-not-equal-1",
                    "example": "a = 2\nb = 3\nif a != b:\n\tprint(\"a is not equal to b\")\n\nif c != a:\n\tprint(\"This will not print because the condition is false.\")"
                },
                {
                    "type": "executable",
                    "id": "ex-not-equal-2",
                    "example": "a = 1\nb = 5\nwhile a != b:\n\ta += 1\nprint(a)\nprint(a)"
                }
            ],
            "search-queries": [
                "not equal",
                "compare not equal",
                "not equal to",
                "are not equal"
            ]
        }
    },
    {
        "keyword": "lessBinExpr",
        "constructType": "expression",
        "editorName": "--- < ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " < "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": "<",
        "matchRegex": null,
        "triggerInsertion": [],
        "toolbox": {
            "category": "Comparisons",
            "title": "Is Less Than?",
            "tooltip": {
                "title": "Is Less Than?",
                "body": "Compares two values. Returns True if the left value is less than the right value."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-lt-1",
                    "example": "a = 2\nb = 3\nif a < b:\n\tprint(\"a is less than b\")\n\nif c < a:\n\tprint(\"This will not print because the condition is false.\")"
                },
                {
                    "type": "executable",
                    "id": "ex-lt-2",
                    "example": "a = 1\nb = 5\nwhile a < b:\n\ta += 1\nprint(a)\nprint(a)"
                }
            ],
            "search-queries": [
                "compare",
                "compare less than",
                "check less than"
            ]
        }
    },
    {
        "keyword": "lessEqBinExpr",
        "constructType": "expression",
        "editorName": "--- <= ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " <= "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": "<",
        "matchRegex": null,
        "triggerInsertion": [
            "="
        ],
        "toolbox": {
            "category": "Comparisons",
            "title": "is less than or equal?",
            "tooltip": {
                "title": "Is Less Than or Equal?",
                "body": "Compares two values. Returns True if the left value is less than or equal to the right value."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-leq-1",
                    "example": "a = 2\nb = 3\n c = 2\n if a <= b:\n\tprint(\"a is less than b\")\n\nif c <= a:\n\tprint(\"c is equal to a\")"
                },
                {
                    "type": "executable",
                    "id": "ex-leq-2",
                    "example": "a = 1\nb = 5\nwhile a <= b:\n\ta += 1\nprint(a)\nprint(a)"
                }
            ],
            "search-queries": [
                "less than or equal",
                "compare",
                "compare less than or equal",
                "check"
            ]
        }
    },
    {
        "keyword": "greaterBinExpr",
        "constructType": "expression",
        "editorName": "--- > ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " > "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": ">",
        "matchRegex": null,
        "triggerInsertion": [],
        "toolbox": {
            "category": "Comparisons",
            "title": "Is Greater Than?",
            "tooltip": {
                "title": "Is Greater Than?",
                "body": "Compares two values. Returns True if the left value is greater than the right value."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-gt-1",
                    "example": "a = 2\nb = 3\nif b > a:\n\tprint(\"b is greater than a\")\n\nif a > b:\n\tprint(\"a is greater to b\")"
                },
                {
                    "type": "executable",
                    "id": "ex-gt-2",
                    "example": "a = 1\nb = 5\nwhile b > a:\n\ta += 1\nprint(a)\nprint(a)"
                }
            ],
            "search-queries": [
                "compare greater than",
                "compare",
                "check greater than"
            ]
        }
    },
    {
        "keyword": "greaterEqBinExpr",
        "constructType": "expression",
        "editorName": "--- >= ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " >= "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": ">",
        "matchRegex": null,
        "triggerInsertion": [
            "="
        ],
        "toolbox": {
            "category": "Comparisons",
            "title": "is greater than or equal?",
            "tooltip": {
                "title": "Is Greater Than or Equal?",
                "body": "Compares two values. Returns True if the left value is greater than or equal to the right value."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-gte-1",
                    "example": "a = 2\nb = 3\n c = 2\n if b >= a:\n\tprint(\"b is greater than a\")\n\nif c >= a:\n\tprint(\"c is equal to a\")"
                },
                {
                    "type": "executable",
                    "id": "ex-gt-1",
                    "example": "a = 1\nb = 5\nwhile b >= a:\n\ta += 1\nprint(a)\nprint(a)"
                }
            ],
            "search-queries": [
                "compare greater than or equal",
                "compare",
                "check greater than or equal"
            ]
        }
    },
    {
        "keyword": "inExpr",
        "constructType": "expression",
        "editorName": "--- in ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " in "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": "in",
        "matchRegex": null,
        "triggerInsertion": [
            " "
        ],
        "toolbox": {
            "category": "Comparisons",
            "title": "Inside?",
            "tooltip": {
                "title": "Inside?",
                "body": "Returns True if the left item is inside the right item; returns False otherwise."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-in-list",
                    "example": "from random import randint\na = randint(1, 10)\nb = [1, 2, 3, 4, 5]\nif a in b:\n\tprint(\"a is inside b\")\n\nif a not in b:\n\tprint(\"a is not inside b\")"
                }
            ],
            "search-queries": [
                "in list",
                "inside list",
                "is inside list",
                "check inside list",
                "check list includes"
            ]
        }
    },
    {
        "keyword": "notInExpr",
        "constructType": "expression",
        "editorName": "--- not in ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " not in "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": "not in",
        "matchRegex": null,
        "triggerInsertion": [
            " "
        ],
        "toolbox": {
            "category": "Comparisons",
            "title": "Not Inside?",
            "tooltip": {
                "title": "Not Inside?",
                "body": "Returns True if the left item is not inside the right item; returns False otherwise."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-not-inside-rand-list",
                    "example": "from random import randint\na = randint(1, 10)\nb = [1, 2, 3, 4, 5]\nif a in b:\n\tprint(\"a is inside b\")\n\nif a not in b:\n\tprint(\"a is not inside b\")"
                }
            ],
            "search-queries": [
                "not in",
                "not inside list",
                "not within list",
                "does not include"
            ]
        }
    },
    {
        "keyword": "andExpr",
        "constructType": "expression",
        "editorName": "--- and ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " and "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": "and",
        "matchRegex": null,
        "triggerInsertion": [
            " "
        ],
        "toolbox": {
            "category": "Booleans",
            "title": "and",
            "tooltip": {
                "title": "And Operator",
                "body": "Used to combine conditional expressions. Results in True if both the left and right expressions are True; returns False otherwise."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-and-four-cases",
                    "example": "if (true and true):\n\tprint(true)\n\nif (true and false):\n\tprint(\"not true\")\n\nif (false and true):\n\tprint(\"still not true\")\n\nif (false and false):\n\tprint(\"also false\")"
                },
                {
                    "type": "executable",
                    "id": "ex-gt-and-gt",
                    "example": "a = 5\nb = 7\nc=2\n\nif ((a > c) and (b > c)):\n\tprint(\"Both expressions are true.\")"
                }
            ],
            "search-queries": [
                "and",
                "both",
                "and operator"
            ]
        }
    },
    {
        "keyword": "orExpr",
        "constructType": "expression",
        "editorName": "--- or ---",
        "format": [
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " or "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand1",
                    "optional": false
                }
            ],
            [
                {
                    "name": "operand2",
                    "optional": false
                }
            ]
        ],
        "match": "or",
        "matchRegex": null,
        "triggerInsertion": [
            " "
        ],
        "toolbox": {
            "category": "Booleans",
            "title": "or",
            "tooltip": {
                "title": "Or Operator",
                "body": "Used to combine conditional expressions. Results in True as long as at least one of the left and right expressions is True; returns False otherwise."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-or-1",
                    "example": "if (true or true):\n\tprint(true)\n\nif (true or false):\n\tprint(\"true\")\n\nif (false or true):\n\tprint(\"still true\")\n\nif (false or false):\n\tprint(\"false\")"
                },
                {
                    "type": "executable",
                    "id": "ex-or-2",
                    "example": "a = 5\nb = 7\nc=2\n\nif ((a > c) and (b < c)):\n\tprint(\"Only the first expression is true.\")"
                }
            ],
            "search-queries": [
                "conditional",
                "or",
                "logical",
                "boolean",
                "one of"
            ]
        }
    },
    {
        "keyword": "notExpr",
        "constructType": "expression",
        "editorName": "not ---",
        "format": [
            {
                "type": "token",
                "value": "not "
            },
            {
                "type": "hole"
            }
        ],
        "holes": [
            [
                {
                    "name": "operand",
                    "optional": false
                }
            ]
        ],
        "match": "not",
        "matchRegex": null,
        "triggerInsertion": [
            " "
        ],
        "toolbox": {
            "category": "Booleans",
            "title": "not",
            "tooltip": {
                "title": "Not Operator",
                "body": "Flips the truth value of an expression. True becomes False, and False becomes True."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-not",
                    "example": "a = 2\nb = 2\nif not (a == b):\n\tprint(\"Will not print.\")\n\nif not (b != a):\n\tprint(\"b is equal to a\")"
                }
            ],
            "search-queries": [
                "negate",
                "not",
                "logical",
                "boolean",
                "opposite"
            ]
        }
    },
    {
        "keyword": "True",
        "constructType": "expression",
        "editorName": "True",
        "format": [
            {
                "type": "token",
                "value": "True"
            }
        ],
        "holes": [],
        "match": "True",
        "matchRegex": null,
        "triggerInsertion": [],
        "toolbox": {
            "category": "Booleans",
            "title": "true",
            "tooltip": {
                "title": "Insert True",
                "body": "Inserts a True boolean value."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-true",
                    "example": "if True :\n\tprint(\"will print\")\n\nif False :\n\tprint(\"will not print\")"
                }
            ],
            "search-queries": [
                "true",
                "boolean"
            ]
        }
    },
    {
        "keyword": "False",
        "constructType": "expression",
        "editorName": "False",
        "format": [
            {
                "type": "token",
                "value": "False"
            }
        ],
        "holes": [],
        "match": "False",
        "matchRegex": null,
        "triggerInsertion": [],
        "toolbox": {
            "category": "Booleans",
            "title": "false",
            "tooltip": {
                "title": "Insert False",
                "body": "Inserts a False boolean value."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-false",
                    "example": "if False :\n\tprint(\"will not print\")\n\nif True :\n\tprint(\"will print\")"
                }
            ],
            "search-queries": [
                "false",
                "boolean"
            ]
        }
    },
    {
        "keyword": "test",
        "constructType": "expression",
        "editorName": "-- k --",
        "format": [
            {
                "type": "identifier",
                "regex": "^w*$"
            },
            {
                "type": "token",
                "value": " k "
            },
            {
                "type": "identifier",
                "regex": "^v*$"
            }
        ],
        "match": "",
        "matchRegex": "^(w*)(?: k (v*))?$",
        "triggerInsertion": [],
        "toolbox": {
            "category": "Tests",
            "title": "add",
            "tooltip": {
                "title": "Insert Addition",
                "body": "Adds the values to the left and right of the operator."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-sum-numbers",
                    "example": "a = 2\nb = 5\nprint((a + b))"
                },
                {
                    "type": "executable",
                    "id": "ex-sum-strings",
                    "example": "a = \"hello\"\nb = \"world\"\nprint((a + \" \" + b))"
                }
            ],
            "search-queries": [
                "add",
                "sum"
            ]
        }
    },
    {
        "keyword": "test",
        "constructType": "statement",
        "editorName": "test: kok :test",
        "format": [
            {
                "type": "token",
                "value": "test: "
            },
            {
                "type": "compound",
                "scope": true,
                "insertBefore": null,
                "format": [
                    {
                        "type": "token",
                        "value": "so...\n",
                        "min": 1,
                        "max": null
                    },
                    {
                        "type": "token",
                        "value": "hello again",
                        "waitOnUser": "h"
                    }
                ]
            },
            {
                "type": "token",
                "value": "kok"
            },
            {
                "type": "token",
                "value": " :test"
            }
        ],
        "match": "test: kok :test",
        "matchRegex": "",
        "triggerInsertion": [],
        "toolbox": {
            "category": "Tests",
            "title": "add",
            "tooltip": {
                "title": "Insert Addition",
                "body": "Adds the values to the left and right of the operator."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-sum-numbers",
                    "example": "a = 2\nb = 5\nprint((a + b))"
                }
            ],
            "search-queries": [
                "test",
                "try"
            ]
        }
    },
    {
        "internalName": "type_conversion",
        "format": [
            {
                "type": "implementation",
                "anchor": "method_name"
            },
            {
                "type": "token",
                "value": "("
            },
            {
                "type": "hole",
                "delimiter": ", "
            },
            {
                "type": "token",
                "value": ")"
            }
        ],
        "triggerInsertion": [
            "("
        ],
        "implementations": [
            {
                "keyword": "str",
                "method_name": "str",
                "constructType": "expression",
                "holes": [
                    [
                        {
                            "name": "convertable",
                            "optional": false
                        }
                    ]
                ],
                "editorName": "str(---)",
                "match": "str",
                "toolbox": {
                    "category": "Converts",
                    "title": "str(object: any)",
                    "body": [
                        {
                            "paragraph": "Converts the passed object to a text object. Useful when comparing values of different types and one of them is a text value. This type of conversion is called a <span class\"bold\">cast</span> because it is temporary."
                        },
                        {
                            "example": "a = 2\nc = \"2\"\nprint(str(a) == c)"
                        },
                        {
                            "paragraph": "In the above example you would not be able to compare <span class\"italics\">a</span> to <span class\"italics\">c</span> before performing the conversion."
                        }
                    ],
                    "tooltip": {
                        "title": "Converts Anything to Text",
                        "body": "Converts the passed object to its textual representation."
                    },
                    "tips": [
                        {
                            "type": "executable",
                            "id": "ex-str-cast",
                            "example": "a = 2\nc = \"2\"\nprint(str(a) == c)"
                        }
                    ],
                    "search-queries": [
                        "string cast",
                        "text convert",
                        "convert to string",
                        "convert to text"
                    ]
                }
            },
            {
                "keyword": "int",
                "method_name": "int",
                "constructType": "expression",
                "holes": [
                    [
                        {
                            "name": "convertable",
                            "optional": false
                        }
                    ]
                ],
                "editorName": "int(---)",
                "match": "int",
                "toolbox": {
                    "category": "Converts",
                    "title": "int(object: string)",
                    "tooltip": {
                        "title": "Converts Text to Number",
                        "body": "Converts a number text to an actual number. Extremely useful when trying to input numbers from the user."
                    },
                    "tips": [
                        {
                            "type": "executable",
                            "id": "ex-int-cast",
                            "example": "a = \"2\"\nb = \"5\"\ntext_add = a + b\nnumber_add = int(a) + int(b)"
                        }
                    ],
                    "search-queries": [
                        "integer cast",
                        "number convert",
                        "convert to number",
                        "convert to integer"
                    ]
                }
            }
        ]
    },
    {
        "keyword": "import",
        "editorName": "from -- import --",
        "format": [
            {
                "type": "token",
                "value": "from "
            },
            {
                "type": "editable",
                "regex": "^[a-zA-Z_][a-zA-Z0-9_\\.]*$"
            },
            {
                "type": "token",
                "value": " import "
            },
            {
                "type": "editable",
                "regex": "^[a-zA-Z_][a-zA-Z0-9_\\.]*$"
            }
        ],
        "match": "from",
        "triggerInsertion": [
            " "
        ],
        "toolbox": {
            "category": "Imports",
            "title": "Import Module",
            "tooltip": {
                "title": "Imports A Function",
                "body": "Loads a particular function from a module."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-import-randint-and-choice",
                    "example": "from random import randint\nfrom random import choice"
                },
                {
                    "type": "executable",
                    "id": "ex-import-randint-use",
                    "example": "from random import randint\nprint(randint(1, 6))"
                }
            ],
            "search-queries": [
                "import module",
                "import random"
            ]
        }
    }
]