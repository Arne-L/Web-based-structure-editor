[
    {
        "keyword": "uniPredicate",
        "constructType": "clause",
        "editorName": "--(--).",
        "format": [
            {
                "type": "identifier",
                "regex": "[a-z][a-zA-Z0-9_]*",
                "scopeType": "global",
                "reference": "predicate"
            },
            {
                "type": "token",
                "value": "("
            },
            {
                "type": "recursive",
                "recursiveName": "arguments_bodyless"
            },
            {
                "type": "token",
                "value": ")"
            },
            {
                "type": "token",
                "value": "."
            }
        ],
        "match": null,
        "matchRegex": "^([a-z][a-zA-Z0-9_]*)\\(?(.*\\)\\s*:-\\s*.*\\.)?$",
        "triggerInsertion": [],
        "toolbox": {
            "category": "Predicates",
            "title": "Body less predicate",
            "tooltip": {
                "title": "Predicate",
                "body": "Defines a predicate"
            },
            "tips": [
                {
                    "type": "quick",
                    "text": "Define a new predicate"
                }
            ],
            "searchQueries": [
                "predicate",
                "head",
                "rule",
                "clause"
            ]
        }
    },
    {
        "keyword": "predicate",
        "constructType": "clause",
        "editorName": "-- (--) :- ---.",
        "format": [
            {
                "type": "identifier",
                "regex": "[a-z][a-zA-Z0-9_]*",
                "scopeType": "global",
                "reference": "predicate"
            },
            {
                "type": "token",
                "value": "("
            },
            {
                "type": "recursive",
                "recursiveName": "arguments"
            },
            {
                "type": "token",
                "value": ")"
            },
            {
                "type": "token",
                "value": " :- "
            },
            {
                "type": "recursive",
                "recursiveName": "body"
            }
        ],
        "match": null,
        "matchRegex": "^([a-z][a-zA-Z0-9_]*)\\(?(.*\\)\\s*:-\\s*.*\\.)?$",
        "triggerInsertion": [
            "("
        ],
        "toolbox": {
            "category": "Predicates",
            "title": "Predicate",
            "tooltip": {
                "title": "Predicate",
                "body": "Defines a predicate"
            },
            "tips": [
                {
                    "type": "quick",
                    "text": "Define a new predicate"
                }
            ],
            "searchQueries": [
                "predicate",
                "head",
                "rule",
                "clause",
                ":-"
            ]
        }
    },
    {
        "keyword": "predicateCall",
        "constructType": "term",
        "editorName": "--(--)",
        "format": [
            {
                "type": "reference",
                "to": "predicate"
            },
            {
                "type": "token",
                "value": "("
            },
            {
                "type": "recursive",
                "recursiveName": "callArguments"
            },
            {
                "type": "token",
                "value": ")"
            }
        ],
        "match": "--(",
        "matchRegex": null,
        "triggerInsertion": [],
        "toolbox": {
            "category": "Calls",
            "title": "Predicate",
            "tooltip": {
                "title": "Predicate",
                "body": "Defines a predicate"
            },
            "tips": [
                {
                    "type": "quick",
                    "text": "Define a new predicate"
                }
            ],
            "searchQueries": [
                "predicate",
                "call"
            ]
        }
    },
    {
        "keyword": "varReference",
        "constructType": "term",
        "editorName": "x",
        "format": [
            {
                "type": "reference",
                "to": "variable"
            }
        ],
        "match": "--",
        "matchRegex": null,
        "triggerInsertion": [
            " "
        ],
        "toolbox": {
            "category": "Variables",
            "title": "Reference Variable",
            "tooltip": {
                "title": "Reference Variable",
                "body": "Refers to the value stored in the specified variable."
            },
            "tips": [],
            "searchQueries": [
                "reference variable",
                "variable",
                "var"
            ]
        }
    },
    {
        "keyword": "true",
        "constructType": "term",
        "editorName": "true",
        "format": [
            {
                "type": "token",
                "value": "true"
            }
        ],
        "match": "tru",
        "matchRegex": null,
        "triggerInsertion": [
            "e"
        ],
        "toolbox": {
            "category": "Predicates",
            "title": "True",
            "tooltip": {
                "title": "True",
                "body": "The constant true"
            },
            "tips": [
                {
                    "type": "quick",
                    "text": "Insert the constant true"
                }
            ],
            "searchQueries": [
                "true",
                "constant",
                "truth"
            ]
        }
    },
    {
        "keyword": "false",
        "constructType": "term",
        "editorName": "false",
        "format": [
            {
                "type": "token",
                "value": "false"
            }
        ],
        "match": "fals",
        "matchRegex": null,
        "triggerInsertion": [
            "e"
        ],
        "toolbox": {
            "category": "Predicates",
            "title": "False",
            "tooltip": {
                "title": "False",
                "body": "The constant false"
            },
            "tips": [
                {
                    "type": "quick",
                    "text": "Insert the constant false"
                }
            ],
            "searchQueries": [
                "false",
                "constant",
                "truth"
            ]
        }
    },
    {
        "keyword": "is",
        "constructType": "term",
        "editorName": "--- is ---",
        "format": [
            {
                "type": "hole",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            },
            {
                "type": "token",
                "value": " is "
            },
            {
                "type": "hole",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            }
        ],
        "match": "is",
        "matchRegex": null,
        "triggerInsertion": [
            " "
        ],
        "toolbox": {
            "category": "Arithmetics",
            "title": "Arithmetic equality check",
            "tooltip": {
                "title": "Is operator",
                "body": "Check if the left hand side is equal to the right hand side"
            },
            "tips": [
                {
                    "type": "quick",
                    "text": "All variables need to be bound to a numeric value"
                },
                {
                    "type": "quick",
                    "text": ""
                }
            ],
            "searchQueries": [
                "false",
                "constant",
                "truth"
            ]
        }
    },
    {
        "keyword": "addBinExpr",
        "constructType": "term",
        "editorName": "--- + ---",
        "format": [
            {
                "type": "hole",
                "delimiter": ", ",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            },
            {
                "type": "token",
                "value": " + "
            },
            {
                "type": "hole",
                "delimiter": ", ",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            }
        ],
        "match": "+",
        "matchRegex": null,
        "triggerInsertion": [],
        "toolbox": {
            "category": "Arithmetics",
            "title": "add",
            "tooltip": {
                "title": "Insert Addition",
                "body": "Adds the values to the left and right of the operator."
            },
            "tips": [],
            "searchQueries": [
                "add",
                "sum"
            ]
        }
    },
    {
        "keyword": "subBinExpr",
        "constructType": "term",
        "editorName": "--- - ---",
        "format": [
            {
                "type": "hole",
                "delimiter": ", ",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            },
            {
                "type": "token",
                "value": " - "
            },
            {
                "type": "hole",
                "delimiter": ", ",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            }
        ],
        "match": "-",
        "matchRegex": null,
        "triggerInsertion": [],
        "toolbox": {
            "category": "Arithmetics",
            "title": "subtract",
            "tooltip": {
                "title": "Insert Subtraction",
                "body": "Subtracts the value to the right of the operator from the value to the left."
            },
            "tips": [],
            "searchQueries": [
                "subtract numbers",
                "subtraction",
                "deduct"
            ]
        }
    },
    {
        "keyword": "lessExpr",
        "constructType": "term",
        "editorName": "--- < ---",
        "format": [
            {
                "type": "hole",
                "delimiter": ", ",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            },
            {
                "type": "token",
                "value": " < "
            },
            {
                "type": "hole",
                "delimiter": ", ",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            }
        ],
        "match": "<",
        "matchRegex": null,
        "triggerInsertion": [],
        "toolbox": {
            "category": "Arithmetics",
            "title": "less than",
            "tooltip": {
                "title": "Insert Less Than",
                "body": "Checks if the value to the left of the operator is smaller than the value to the right."
            },
            "tips": [],
            "searchQueries": [
                "less than"
            ]
        }
    },
    {
        "keyword": "notEqExpr",
        "constructType": "term",
        "editorName": "--- =\\= ---",
        "format": [
            {
                "type": "hole",
                "delimiter": ", ",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            },
            {
                "type": "token",
                "value": " =\\= "
            },
            {
                "type": "hole",
                "delimiter": ", ",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            }
        ],
        "match": "=\\=",
        "matchRegex": null,
        "triggerInsertion": [],
        "toolbox": {
            "category": "Arithmetics",
            "title": "not equal",
            "tooltip": {
                "title": "Insert Not Equal",
                "body": "Checks if the value to the left of the operator is not equal to the value to the right."
            },
            "tips": [],
            "searchQueries": [
                "not equal"
            ]
        }
    },
    {
        "keyword": "numberLit",
        "constructType": "term",
        "editorName": "0",
        "format": [
            {
                "type": "editable",
                "value": "0",
                "regex": "^(([+-][0-9]+)|(([+-][0-9]*)\\.([0-9]+))|([0-9]*)|(([0-9]*)\\.([0-9]*)))$"
            }
        ],
        "match": null,
        "matchRegex": "^(([+-][0-9]+)|(([+-][0-9]*)\\.([0-9]+))|([0-9]*)|(([0-9]*)\\.([0-9]*)))$",
        "triggerInsertion": [
            " ",
            "+",
            "-",
            "*",
            "/",
            "%",
            "(",
            ")"
        ],
        "toolbox": {
            "category": "Numbers",
            "title": "123",
            "tooltip": {
                "title": "Insert a Number",
                "body": "Inserts a number and edit its value."
            },
            "tips": []
        }
    },
    {
        "keyword": "absVal",
        "constructType": "term",
        "editorName": "abs(---)",
        "format": [
            {
                "type": "token",
                "value": "abs("
            },
            {
                "type": "hole",
                "delimiter": ", ",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            },
            {
                "type": "token",
                "value": ")"
            }
        ],
        "match": "abs",
        "matchRegex": null,
        "triggerInsertion": [
            "("
        ],
        "toolbox": {
            "category": "Numbers",
            "tooltip": {
                "title": "Absolute Value",
                "body": "Get the absolute value of a number"
            },
            "tips": []
        }
    },
    {
        "keyword": "stringLit",
        "constructType": "term",
        "editorName": "\"\"",
        "format": [
            {
                "type": "token",
                "value": "\""
            },
            {
                "type": "editable",
                "regex": "^([^\\r\\n]*)$"
            },
            {
                "type": "token",
                "value": "\""
            }
        ],
        "match": null,
        "matchRegex": "^([^\\r\\n]*)$",
        "triggerInsertion": [
            "\""
        ],
        "toolbox": {
            "category": "Text",
            "title": "text",
            "tooltip": {
                "title": "Insert a Text",
                "body": "Inserts an editable text that is wrapped by double quotes."
            },
            "tips": [],
            "searchQueries": [
                "create text",
                "create string",
                "empty string",
                "empty text"
            ]
        }
    },
    {
        "keyword": "unification",
        "constructType": "term",
        "editorName": "--- = ---",
        "format": [
            {
                "type": "hole",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            },
            {
                "type": "token",
                "value": " = "
            },
            {
                "type": "hole",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            }
        ],
        "match": "=",
        "matchRegex": null,
        "triggerInsertion": [
            " "
        ],
        "toolbox": {
            "category": "Unification",
            "title": "Unification",
            "tooltip": {
                "title": "Unification Operator",
                "body": "Unifies the left hand side with the right hand side."
            },
            "tips": [
                {
                    "type": "quick",
                    "text": "Unify two terms"
                }
            ],
            "searchQueries": [
                "false",
                "constant",
                "truth"
            ]
        }
    },
    {
        "keyword": "list",
        "constructType": "term",
        "editorName": "[---]",
        "format": [
            {
                "type": "token",
                "value": "["
            },
            {
                "type": "hole",
                "delimiter": ", ",
                "elements": [
                    {
                        "type": "term",
                        "optional": true
                    }
                ]
            },
            {
                "type": "compound",
                "scope": false,
                "insertBefore": null,
                "format": [
                    {
                        "type": "token",
                        "value": ", ",
                        "waitOnUser": ","
                    },
                    {
                        "type": "hole",
                        "delimiter": ", ",
                        "elements": [
                            {
                                "type": "term",
                                "optional": false
                            }
                        ]
                    }
                ]
            },
            {
                "type": "token",
                "value": "]"
            }
        ],
        "match": "[---]",
        "matchRegex": null,
        "triggerInsertion": [
            "]"
        ],
        "toolbox": {
            "category": "Lists",
            "title": "List",
            "tooltip": {
                "title": "Insert Editable List",
                "body": "Inserts an empty list. Press comma before or after each item to add a new empty item."
            },
            "tips": [],
            "searchQueries": [
                "empty list",
                "create empty list",
                "create list",
                "array",
                "create empty array"
            ]
        }
    },
    {
        "keyword": "listTail",
        "constructType": "term",
        "editorName": "[--- | ---]",
        "format": [
            {
                "type": "token",
                "value": "["
            },
            {
                "type": "hole",
                "delimiter": ", ",
                "elements": [
                    {
                        "type": "term",
                        "optional": true
                    }
                ]
            },
            {
                "type": "token",
                "value": " | "
            },
            {
                "type": "hole",
                "delimiter": ", ",
                "elements": [
                    {
                        "type": "term",
                        "optional": true
                    }
                ]
            },
            {
                "type": "token",
                "value": "]"
            }
        ],
        "match": "[--- | ---]",
        "matchRegex": null,
        "triggerInsertion": [
            "|"
        ],
        "toolbox": {
            "category": "Lists",
            "tooltip": {
                "title": "Insert Editable List",
                "body": "Inserts an empty list. Press comma before or after each item to add a new empty item."
            },
            "tips": [],
            "searchQueries": [
                "empty list",
                "create empty list",
                "create list",
                "array",
                "create empty array"
            ]
        }
    },
    {
        "keyword": "select",
        "constructType": "term",
        "editorName": "select(---, ---, ---)",
        "format": [
            {
                "type": "token",
                "value": "select("
            },
            {
                "type": "hole",
                "delimiter": ", ",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            },
            {
                "type": "token",
                "value": ", "
            },
            {
                "type": "hole",
                "delimiter": ", ",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            },
            {
                "type": "token",
                "value": ", "
            },
            {
                "type": "hole",
                "delimiter": ", ",
                "elements": [
                    {
                        "type": "term",
                        "optional": false
                    }
                ]
            },
            {
                "type": "token",
                "value": ")"
            }
        ],
        "match": "select",
        "matchRegex": null,
        "triggerInsertion": [
            "("
        ],
        "toolbox": {
            "category": "Lists",
            "tooltip": {
                "title": "Select an element",
                "body": "Select an element from a list and return the remaining list."
            },
            "tips": [],
            "searchQueries": [
                "select element",
                "select from list",
                "select"
            ]
        }
    }
]