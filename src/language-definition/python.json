[
    {
        "internalName": "standard_method",
        "format": [
            {
                "type": "construct",
                "name": "identifier",
                "anchor": "method_name"
            },
            {
                "type": "token",
                "value": "("
            },
            {
                "type": "hole",
                "delimiter": ", "
            },
            {
                "type": "token",
                "value": ")"
            }
        ],
        "triggerInsertion": [
            "("
        ],
        "implementations": [
            {
                "ref": "mathod_name",
                "name": "print",
                "holes": [
                    [
                        {
                            "name": "text",
                            "optional": false
                        }
                    ]
                ],
                "editorName": "print(---)",
                "match": "print",
                "toolbox": {
                    "category": "Tests",
                    "title": "print(message: any)",
                    "tooltip": {
                        "title": "Display Text in Console",
                        "body": "Displays the textual value of its input in the console."
                    },
                    "invalidTooltip": "Can only be inserted on an empty line within a loop.",
                    "tips": [
                        {
                            "type": "executable",
                            "id": "ex-print-num-str",
                            "example": "print(123)\nprint(\"Hello World!\")"
                        },
                        {
                            "type": "executable",
                            "id": "ex-print-var",
                            "example": "a = \"abc\"\nprint(a)"
                        }
                    ],
                    "search-queries": [
                        "output",
                        "say",
                        "print",
                        "print output",
                        "console",
                        "write",
                        "see output"
                    ]
                }
            }
        ]
    },
    {
        "name": "break",
        "editorName": "break",
        "format": [
            {
                "type": "token",
                "value": "break"
            }
        ],
        "match": "brea",
        "triggerInsertion": [
            "k"
        ],
        "toolbox": {
            "category": "Tests",
            "title": "Break out of loops",
            "tooltip": {
                "title": "Insert Break inside Loop",
                "body": "Stops the innermost running loop (for, while) and breaks out of it."
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-break-out-range",
                    "example": "for i in range(0, 50):\n\tif i == 25:\n\t\tbreak\n\tprint(i)"
                },
                {
                    "type": "use-case",
                    "title": "break out of a while loop on some condition",
                    "path": "https://cdn.majeed.cc/pydoc/images/use-cases/3-break/",
                    "max": 30,
                    "extension": "PNG",
                    "prefix": "Slide",
                    "id": "break-while-on-condition",
                    "explanations": [
                        {
                            "slide": 5,
                            "text": "variable i is defined and set to 0"
                        },
                        {
                            "slide": 6,
                            "text": "should repeat the while statements if i < 10"
                        },
                        {
                            "slide": 7,
                            "text": "i is 0 and less than 10 -> should repeat"
                        },
                        {
                            "slide": 9,
                            "text": "i is 0, so i + 1 is 1"
                        },
                        {
                            "slide": 11,
                            "text": "i becomes 1"
                        },
                        {
                            "slide": 12,
                            "text": "should enter the if statements if i equals 3"
                        },
                        {
                            "slide": 13,
                            "text": "i is 1 so shouldn't enter the if"
                        },
                        {
                            "slide": 16,
                            "text": "i is 1, so i + 1 is 2"
                        },
                        {
                            "slide": 14,
                            "text": "should continue repeating because i is 1"
                        },
                        {
                            "slide": 18,
                            "text": "i becomes 2"
                        },
                        {
                            "slide": 20,
                            "text": "i is not equal to 3"
                        },
                        {
                            "slide": 21,
                            "text": "should continue repeating because i is 2"
                        },
                        {
                            "slide": 23,
                            "text": "i is 2, so i + 1 is 3"
                        },
                        {
                            "slide": 25,
                            "text": "i becomes 3"
                        },
                        {
                            "slide": 27,
                            "text": "is equal to 3 -> should enter if"
                        },
                        {
                            "slide": 28,
                            "text": "break out of the current loop"
                        },
                        {
                            "slide": 29,
                            "text": "won't check the while condition as we used break"
                        },
                        {
                            "slide": 30,
                            "text": "will print 'done'"
                        }
                    ]
                }
            ],
            "search-queries": [
                "exit",
                "loop",
                "break"
            ]
        }
    },
    {
        "name": "while",
        "editorName": "while --- :",
        "format": [
            {
                "type": "token",
                "value": "while "
            },
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " :"
            },
            {
                "type": "body"
            }
        ],
        "holes": [
            [
                {
                    "name": "condition",
                    "optional": false
                }
            ]
        ],
        "match": "while",
        "triggerInsertion": [
            " ",
            "("
        ],
        "toolbox": {
            "category": "Tests",
            "title": "while loop",
            "tooltip": {
                "title": "repeatedly execute code while true",
                "body": "repeatedly executes the code block inside the while loop as long as the condition remains `True`."
            },
            "tips": [
                {
                    "type": "executable",
                    "title": "infinite loop",
                    "id": "ex-while-1",
                    "example": "while True :\n\tprint(\"an infinite loop\")"
                },
                {
                    "type": "executable",
                    "title": "count from 0 to 10",
                    "id": "ex-while-2",
                    "example": "i = 0\nwhile i < 10:\n\tprint(i)\n\ti = i + 1"
                },
                {
                    "type": "quick",
                    "title": "compare to scratch's repeat until block",
                    "text": "the `while` loop in Python compared to the `repeat until` block in Scratch: the `while` loop in Python repeats code as long as the condition is `True`, and stops when the condition becomes `False`. However, the `repeat until` block in Scratch repeats code as long as the condition is `False`, and stops when the condition becomes `True`."
                },
                {
                    "type": "use-case",
                    "title": "repeatedly increment a variable",
                    "path": "https://cdn.majeed.cc/pydoc/images/use-cases/1-while-counter/",
                    "max": 30,
                    "prefix": "Slide",
                    "extension": "PNG",
                    "id": "while-increment-var",
                    "explanations": [
                        {
                            "slide": 7,
                            "text": "i is less than 3 so the condition holds true"
                        },
                        {
                            "slide": 28,
                            "text": "i is no longer less than 3 so the condition is false"
                        },
                        {
                            "slide": 29,
                            "text": "should execute the next line after the while loop"
                        }
                    ]
                }
            ],
            "search-queries": [
                "while",
                "repeat",
                "repeat while",
                "repeat until",
                "loop",
                "condition",
                "conditional",
                "repeat condition"
            ]
        }
    },
    {
        "name": "if",
        "editorName": "if --- :",
        "format": [
            {
                "type": "token",
                "value": "if "
            },
            {
                "type": "hole"
            },
            {
                "type": "token",
                "value": " :"
            },
            {
                "type": "body"
            }
        ],
        "holes": [
            [
                {
                    "name": "condition",
                    "optional": false
                }
            ]
        ],
        "match": "if",
        "triggerInsertion": [
            " ",
            "("
        ],
        "toolbox": {
            "category": "Tests",
            "title": "if statement",
            "tooltip": {
                "title": "Insert If Statement",
                "body": "Will only execute the indented block of code below it when the condition is true"
            },
            "tips": [
                {
                    "type": "executable",
                    "id": "ex-if-1",
                    "example": "a = 3\nif a < 10:\n\tprint(\"Success!\")"
                },
                {
                    "type": "executable",
                    "id": "ex-if-2",
                    "example": "a = 3\nif a > 10:\n\tprint(\"Success!\")"
                },
                {
                    "type": "use-case",
                    "title": "check the value of a variable",
                    "path": "https://cdn.majeed.cc/pydoc/images/use-cases/6-if/",
                    "max": 13,
                    "extension": "PNG",
                    "prefix": "Slide",
                    "id": "check-val-variable"
                }
            ],
            "search-queries": [
                "if",
                "condition",
                "conditional",
                "choose",
                "path"
            ]
        }
    }
]